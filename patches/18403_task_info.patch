diff --git a/src/slave/containerizer/containerizer.hpp b/src/slave/containerizer/containerizer.hpp
index d9ae326..6cf351e 100644
--- a/src/slave/containerizer/containerizer.hpp
+++ b/src/slave/containerizer/containerizer.hpp
@@ -89,9 +89,10 @@ public:
       const Option<state::SlaveState>& state) = 0;
 
   // Launch a containerized executor.
-  virtual process::Future<Nothing> launch(
+  virtual process::Future<ExecutorInfo> launch(
       const ContainerID& containerId,
-      const ExecutorInfo& executorInfo,
+      const TaskInfo& task,
+      const FrameworkID& frameworkId,
       const std::string& directory,
       const Option<std::string>& user,
       const SlaveID& slaveId,
diff --git a/src/slave/containerizer/mesos_containerizer.hpp b/src/slave/containerizer/mesos_containerizer.hpp
index ee1fd30..db1fd85 100644
--- a/src/slave/containerizer/mesos_containerizer.hpp
+++ b/src/slave/containerizer/mesos_containerizer.hpp
@@ -51,9 +51,10 @@ public:
   virtual process::Future<Nothing> recover(
       const Option<state::SlaveState>& state);
 
-  virtual process::Future<Nothing> launch(
+  virtual process::Future<ExecutorInfo> launch(
       const ContainerID& containerId,
-      const ExecutorInfo& executorInfo,
+      const TaskInfo& task,
+      const FrameworkID& frameworkId,
       const std::string& directory,
       const Option<std::string>& user,
       const SlaveID& slaveId,
@@ -95,9 +96,10 @@ public:
   process::Future<Nothing> recover(
       const Option<state::SlaveState>& state);
 
-  process::Future<Nothing> launch(
+  process::Future<ExecutorInfo> launch(
       const ContainerID& containerId,
-      const ExecutorInfo& executorInfo,
+      const TaskInfo& task,
+      const FrameworkID& frameworkId,
       const std::string& directory,
       const Option<std::string>& user,
       const SlaveID& slaveId,
@@ -148,7 +150,8 @@ private:
       const ContainerID& containerId,
       const std::list<Option<CommandInfo> >& commands);
 
-  process::Future<Nothing> exec(
+  process::Future<ExecutorInfo> exec(
+      const ExecutorInfo& executorInfo,
       const ContainerID& containerId,
       int pipeWrite);
 
diff --git a/src/slave/containerizer/mesos_containerizer.cpp b/src/slave/containerizer/mesos_containerizer.cpp
index 1ce41d7..4cb2e1b 100644
--- a/src/slave/containerizer/mesos_containerizer.cpp
+++ b/src/slave/containerizer/mesos_containerizer.cpp
@@ -113,9 +113,10 @@ Future<Nothing> MesosContainerizer::recover(const Option<state::SlaveState>& sta
 }
 
 
-Future<Nothing> MesosContainerizer::launch(
+Future<ExecutorInfo> MesosContainerizer::launch(
     const ContainerID& containerId,
-    const ExecutorInfo& executorInfo,
+    const TaskInfo& task,
+    const FrameworkID& frameworkId,
     const string& directory,
     const Option<string>& user,
     const SlaveID& slaveId,
@@ -125,7 +126,8 @@ Future<Nothing> MesosContainerizer::launch(
   return dispatch(process,
                   &MesosContainerizerProcess::launch,
                   containerId,
-                  executorInfo,
+                  task,
+                  frameworkId,
                   directory,
                   user,
                   slaveId,
@@ -352,6 +354,64 @@ int execute(
 }
 
 
+ExecutorInfo getExecutorInfo(
+    const Flags& flags,
+    const TaskInfo& task,
+    const FrameworkID& frameworkId)
+{
+  CHECK_NE(task.has_executor(), task.has_command())
+    << "Task " << task.task_id()
+    << " should have either CommandInfo or ExecutorInfo set but not both";
+
+  if (!task.has_command()) {
+    return task.executor();
+  }
+
+  ExecutorInfo executor;
+
+  // Command executors share the same id as the task.
+  executor.mutable_executor_id()->set_value(task.task_id().value());
+
+  executor.mutable_framework_id()->CopyFrom(frameworkId);
+
+  // Prepare an executor name which includes information on the
+  // command being launched.
+  string name =
+    "(Task: " + task.task_id().value() + ") " + "(Command: sh -c '";
+
+  if (task.command().value().length() > 15) {
+    name += task.command().value().substr(0, 12) + "...')";
+  } else {
+    name += task.command().value() + "')";
+  }
+
+  executor.set_name("Command Executor " + name);
+  executor.set_source(task.task_id().value());
+
+  // Copy the CommandInfo to get the URIs and environment, but
+  // update it to invoke 'mesos-executor' (unless we couldn't
+  // resolve 'mesos-executor' via 'realpath', in which case just
+  // echo the error and exit).
+  executor.mutable_command()->MergeFrom(task.command());
+
+  Result<string> path = os::realpath(
+      path::join(flags.launcher_dir, "mesos-executor"));
+
+  if (path.isSome()) {
+    executor.mutable_command()->set_value(path.get());
+  } else {
+    executor.mutable_command()->set_value(
+        "echo '" +
+        (path.isError()
+         ? path.error()
+         : "No such file or directory") +
+        "'; exit 1");
+  }
+
+  return executor;
+}
+
+
 // Launching an executor involves the following steps:
 // 1. Prepare the container. First call prepare on each isolator and then
 //    fetch the executor into the container sandbox.
@@ -360,15 +420,19 @@ int execute(
 // 3. Isolate the executor. Call isolate with the pid for each isolator.
 // 4. Exec the executor. The forked child is signalled to continue and exec the
 //    executor.
-Future<Nothing> MesosContainerizerProcess::launch(
+Future<ExecutorInfo> MesosContainerizerProcess::launch(
     const ContainerID& containerId,
-    const ExecutorInfo& executorInfo,
+    const TaskInfo& task,
+    const FrameworkID& frameworkId,
     const string& directory,
     const Option<string>& user,
     const SlaveID& slaveId,
     const PID<Slave>& slavePid,
     bool checkpoint)
 {
+  ExecutorInfo executorInfo = getExecutorInfo(flags, task, frameworkId);
+  executorInfo.mutable_resources()->MergeFrom(task.resources());
+
   if (promises.contains(containerId)) {
     LOG(ERROR) << "Cannot start already running container '"
                << containerId << "'";
@@ -430,6 +494,7 @@ Future<Nothing> MesosContainerizerProcess::launch(
                 lambda::_1))
     .then(defer(self(),
                 &Self::exec,
+                executorInfo,
                 containerId,
                 pipes[1]))
     .onAny(lambda::bind(&os::close, pipes[0]))
@@ -661,7 +726,8 @@ Future<Nothing> MesosContainerizerProcess::_isolate(
 }
 
 
-Future<Nothing> MesosContainerizerProcess::exec(
+Future<ExecutorInfo> MesosContainerizerProcess::exec(
+    const ExecutorInfo& executorInfo,
     const ContainerID& containerId,
     int pipeWrite)
 {
@@ -678,7 +744,7 @@ Future<Nothing> MesosContainerizerProcess::exec(
                    string(strerror(errno)));
   }
 
-  return Nothing();
+  return executorInfo;
 }
 
 
diff --git a/src/slave/slave.hpp b/src/slave/slave.hpp
index 9d87505..c3d6f16 100644
--- a/src/slave/slave.hpp
+++ b/src/slave/slave.hpp
@@ -217,7 +217,7 @@ public:
       const ExecutorID& executorId,
       const ContainerID& containerId,
       const TaskInfo& task,
-      const process::Future<Nothing>& future);
+      const process::Future<ExecutorInfo>& future);
 
   void executorTerminated(
       const FrameworkID& frameworkId,
@@ -274,12 +274,6 @@ public:
   // Helper routine to lookup a framework.
   Framework* getFramework(const FrameworkID& frameworkId);
 
-  // Returns an ExecutorInfo for a TaskInfo (possibly
-  // constructing one if the task has a CommandInfo).
-  ExecutorInfo getExecutorInfo(
-      const FrameworkID& frameworkId,
-      const TaskInfo& task);
-
   // Handle the second phase of shutting down an executor for those
   // executors that have not properly shutdown within a timeout.
   void shutdownExecutorTimeout(
diff --git a/src/slave/slave.cpp b/src/slave/slave.cpp
index 9e37fd0..a0ddc8e 100644
--- a/src/slave/slave.cpp
+++ b/src/slave/slave.cpp
@@ -2237,63 +2237,6 @@ Framework* Slave::getFramework(const FrameworkID& frameworkId)
 }
 
 
-ExecutorInfo Slave::getExecutorInfo(
-    const FrameworkID& frameworkId,
-    const TaskInfo& task)
-{
-  CHECK_NE(task.has_executor(), task.has_command())
-    << "Task " << task.task_id()
-    << " should have either CommandInfo or ExecutorInfo set but not both";
-
-  if (task.has_command()) {
-    ExecutorInfo executor;
-
-    // Command executors share the same id as the task.
-    executor.mutable_executor_id()->set_value(task.task_id().value());
-
-    executor.mutable_framework_id()->CopyFrom(frameworkId);
-
-    // Prepare an executor name which includes information on the
-    // command being launched.
-    string name =
-      "(Task: " + task.task_id().value() + ") " + "(Command: sh -c '";
-
-    if (task.command().value().length() > 15) {
-      name += task.command().value().substr(0, 12) + "...')";
-    } else {
-      name += task.command().value() + "')";
-    }
-
-    executor.set_name("Command Executor " + name);
-    executor.set_source(task.task_id().value());
-
-    // Copy the CommandInfo to get the URIs and environment, but
-    // update it to invoke 'mesos-executor' (unless we couldn't
-    // resolve 'mesos-executor' via 'realpath', in which case just
-    // echo the error and exit).
-    executor.mutable_command()->MergeFrom(task.command());
-
-    Result<string> path = os::realpath(
-        path::join(flags.launcher_dir, "mesos-executor"));
-
-    if (path.isSome()) {
-      executor.mutable_command()->set_value(path.get());
-    } else {
-      executor.mutable_command()->set_value(
-          "echo '" +
-          (path.isError()
-           ? path.error()
-           : "No such file or directory") +
-          "'; exit 1");
-    }
-
-    return executor;
-  }
-
-  return task.executor();
-}
-
-
 void _monitor(
     const Future<Nothing>& monitor,
     const FrameworkID& frameworkId,
@@ -2314,7 +2257,7 @@ void Slave::executorLaunched(
     const ExecutorID& executorId,
     const ContainerID& containerId,
     const TaskInfo& task,
-    const Future<Nothing>& future)
+    const Future<ExecutorInfo>& future)
 {
   if (!future.isReady()) {
     // The containerizer will clean up if the launch fails we'll just log this
@@ -2355,10 +2298,7 @@ void Slave::executorLaunched(
     return;
   }
 
-  // TODO(nnielsen): Remove this when containerizer returns a future
-  // to the chosen executor info.
-  CHECK_SOME(executor->info);
-  const ExecutorInfo& executorInfo = executor->info.get();
+  const ExecutorInfo& executorInfo = future.get();
 
   // For now, we only check that the executor id matches the task id
   // if no executor was provided in the task.
@@ -2385,6 +2325,7 @@ void Slave::executorLaunched(
     CHECK_SOME(state::checkpoint(path, executorInfo));
   }
 
+  executor->info = executorInfo;
   executor->launched.set(Nothing());
 
   switch (executor->state) {
@@ -3310,22 +3251,11 @@ Executor* Framework::launch(const TaskInfo& task) {
                  lambda::_1,
                  executor->directory));
 
-  // TODO(nnielsen): Remove this when containerizer returns future to
-  // chosen executor info.
-  executor->info = slave->getExecutorInfo(id, task);
-
-  // Tell the containerizer to launch the executor.
-  // NOTE: We modify the ExecutorInfo to include the task's
-  // resources when launching the executor so that the containerizer
-  // has non-zero resources to work with when the executor has
-  // no resources. This should be revisited after MESOS-600.
-  ExecutorInfo executorInfo_ = executor->info.get();
-  executorInfo_.mutable_resources()->MergeFrom(task.resources());
-
   // Launch the container.
   slave->containerizer->launch(
       containerId,
-      executorInfo_, // modified to include the task's resources
+      task,
+      id,
       executor->directory,
       slave->flags.switch_user ? Option<string>(info.user()) : None(),
       slave->info.id(),
diff --git a/src/tests/containerizer.hpp b/src/tests/containerizer.hpp
index c40bbcd..2927074 100644
--- a/src/tests/containerizer.hpp
+++ b/src/tests/containerizer.hpp
@@ -64,11 +64,12 @@ public:
 
   virtual ~TestContainerizer();
 
-  MOCK_METHOD7(
+  MOCK_METHOD8(
       launch,
-      process::Future<Nothing>(
+      process::Future<ExecutorInfo>(
           const ContainerID&,
-          const ExecutorInfo&,
+          const TaskInfo& task,
+          const FrameworkID& frameworkId,
           const std::string&,
           const Option<std::string>&,
           const SlaveID&,
@@ -100,9 +101,10 @@ private:
   void setup();
 
   // Default 'launch' implementation.
-  process::Future<Nothing> _launch(
+  process::Future<ExecutorInfo> _launch(
       const ContainerID& containerId,
-      const ExecutorInfo& executorInfo,
+      const TaskInfo& task,
+      const FrameworkID& frameworkId,
       const std::string& directory,
       const Option<std::string>& user,
       const SlaveID& slaveId,
diff --git a/src/tests/containerizer.cpp b/src/tests/containerizer.cpp
index bfd0643..78c02d6 100644
--- a/src/tests/containerizer.cpp
+++ b/src/tests/containerizer.cpp
@@ -73,15 +73,19 @@ TestContainerizer::~TestContainerizer()
 }
 
 
-Future<Nothing> TestContainerizer::_launch(
+Future<ExecutorInfo> TestContainerizer::_launch(
     const ContainerID& containerId,
-    const ExecutorInfo& executorInfo,
+    const TaskInfo& task,
+    const FrameworkID& frameworkId,
     const string& directory,
     const Option<string>& user,
     const SlaveID& slaveId,
     const PID<slave::Slave>& slavePid,
     bool checkpoint)
 {
+  CHECK(task.has_executor());
+  const ExecutorInfo& executorInfo = task.executor();
+
   CHECK(!drivers.contains(containerId))
     << "Failed to launch executor " << executorInfo.executor_id()
     << " of framework " << executorInfo.framework_id()
@@ -137,7 +141,7 @@ Future<Nothing> TestContainerizer::_launch(
       new Promise<slave::Containerizer::Termination>());
   promises[containerId] = promise;
 
-  return Nothing();
+  return executorInfo;
 }
 
 
@@ -203,7 +207,7 @@ void TestContainerizer::setup()
   EXPECT_CALL(*this, update(_, _))
     .WillRepeatedly(Return(Nothing()));
 
-  EXPECT_CALL(*this, launch(_, _, _, _, _, _, _))
+  EXPECT_CALL(*this, launch(_, _, _, _, _, _, _, _))
     .WillRepeatedly(Invoke(this, &TestContainerizer::_launch));
 }
 
diff --git a/src/tests/slave_recovery_tests.cpp b/src/tests/slave_recovery_tests.cpp
index 3cecca4..f42da4a 100644
--- a/src/tests/slave_recovery_tests.cpp
+++ b/src/tests/slave_recovery_tests.cpp
@@ -3024,9 +3024,9 @@ TYPED_TEST(SlaveRecoveryTest, RestartBeforeContainerizerLaunch)
 
   // Expect the launch but don't do anything.
   Future<Nothing> launch;
-  EXPECT_CALL(*containerizer1, launch(_, _, _, _, _, _, _))
+  EXPECT_CALL(*containerizer1, launch(_, _, _, _, _, _, _, _))
     .WillOnce(DoAll(FutureSatisfy(&launch),
-                    Return(Future<Nothing>())));
+                    Return(Future<ExecutorInfo>())));
 
   driver.launchTasks(offers.get()[0].id(), tasks);
 
